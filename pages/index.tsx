import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useRouter } from "next/router";
import {
  signInWithPopup,
  signOut,
  onAuthStateChanged,
  GoogleAuthProvider,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  updateProfile,
} from "firebase/auth";
import { auth } from "../firebase/firebase";
import { useEffect, useState } from "react";

import { useDispatch } from "react-redux";
import { setUserData } from "@/store/userSlice";
import { useSelector } from "react-redux";
// import { current } from "@reduxjs/toolkit";
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [user, setUser] = useState<string | any>("");
  const [password, setPassord] = useState<string>("");
  const [email, setEmail] = useState<string>("");
  const [displayName, setDisplayName] = useState("");

  const dispatch = useDispatch();

  const userData = useSelector((state) => state);
  console.log(userData, "hfukdsufhusfigusf");

  // google login
  const handleSignInWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    await signInWithPopup(auth, provider);
  };

  // signup
  const handleEmailSignIn = async () => {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );

      const user = userCredential.user;
      console.log(user);

      // Step 2: Update the user's display name
      if (userCredential.user) {
        await updateProfile(auth.currentUser, {
          displayName: displayName,
        });
        console.log("User signed up successfully!", userCredential.user);
      }
    } catch (error) {
      console.log("Error signing in with email and password:", error);
    }
  };

  // login
  const handleEmailLogIn = async () => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;
      console.log(user);
    } catch (error) {
      console.log("Error signing in with email and password:", error);
    }
  };

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
    });
    return () => unsubscribe();
  }, [user]);

  console.log(user, "state");

  const router = useRouter();

  if (user) {
    // User is already signed in, redirect to DashboardPage
    router.push("/dashboard");
    // return null;
  }

  useEffect(() => {
    if (user) {
      const userData = { name: user.displayName, email: user.email };
      console.log(userData);
      dispatch(setUserData(userData));
    }
  }, [user]);

  let persi;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          <h1>Login Page</h1>
          <div className={styles.googleButtonContainer}>
            {/* google */}
            <div
              className={styles.googleButton}
              onClick={handleSignInWithGoogle}
            >
              <img
                className={styles.googleLogo}
                src={`/GoogleLogo.png`}
                alt=""
                height="35px"
              />
              <button>Login with Google</button>
            </div>
          </div>
          {/* email and password */}
          <div className={styles.emailAuth}>
            <div className={styles.inputbox}>
              <label className={styles.inputLabel} htmlFor="username">
                User Name
              </label>
              <input
                className={styles.input}
                type="text"
                id="username"
                value={displayName}
                onChange={(e) => setDisplayName(e.target.value)}
              />
            </div>
            <div className={styles.inputbox}>
              <label className={styles.inputLabel} htmlFor="email">
                Email
              </label>
              <input
                className={styles.input}
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className={styles.inputbox}>
              <label className={styles.inputLabel} htmlFor="password">
                Password
              </label>
              <input
                className={styles.input}
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassord(e.target.value)}
              />
            </div>
            <div className={styles.emailButtonContainer}>
              <button
                className={styles.signupWithEmailButton}
                onClick={handleEmailSignIn}
              >
                Signup with Email
              </button>
              <button
                className={styles.signupWithEmailButton}
                onClick={handleEmailLogIn}
              >
                Login with Email
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
